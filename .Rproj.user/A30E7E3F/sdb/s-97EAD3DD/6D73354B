{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the \n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n# \n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(SnowballC)\nlibrary(wordcloud)\nlibrary(stringr)\n\nsource(\"R/twitter_search.R\")\nsource(\"R/load_datasets.R\")\n\n# Define server logic required to draw a histogram\nshinyServer(function(session, input, output) {\n  \n  updateSelectizeInput(session, 'job_titles', choices = unique(job_titles$title), server = TRUE)\n  \n  data <- eventReactive(\n    input$btn_run,\n    if(input$dataset == 'Twitter Local'){\n      provided_data\n    } else {\n      search_tweets(\"Job Vacancy\", n = input$num_tweets, token = twitter_token, type = \"mixed\")\n    }\n  )\n  \n  data_mut <- reactive({\n    url_pattern <- \"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"\n    \n    temp_data <- data()\n    \n    temp_data %>%\n      mutate(ContentURL = str_extract(text, url_pattern)) %>%\n      mutate(text = gsub(url_pattern,\"\", text, ignore.case= TRUE, perl = TRUE)) \n  })\n  \n  wc_data <- reactive({\n    data_mut() %>%\n      select(status_id,text) %>%\n      na.omit %>%\n      unnest_tokens(word, text) %>%\n      anti_join(stop_words, by = \"word\") %>%\n      mutate(word = wordStem(word)) %>%\n      distinct %>%\n      group_by(word) %>%\n      tally %>%\n      ungroup %>%\n      arrange(desc(n)) %>% \n      filter(word != \"job\")\n  }\n  )\n  \n  output$chart <- renderPlot(\n    {\n      \n      job_titles %>% \n        mutate(jtproc = wordStem(jtproc)) %>% \n        left_join(wc_data(), ., by=c(\"word\" = \"jtproc\")) %>% \n        na.omit() %>%\n        group_by(title) %>% \n        summarise(n_title = n()) %>% \n        ungroup %>%\n        arrange(desc(n_title)) %>%\n        .[1:10,] %>%\n        ggplot(aes(x=title, y = n_title)) +\n        geom_bar(stat = \"identity\") +\n        coord_flip() +\n        theme_bw() + \n        xlab(\"Job Description\") +\n        ylab(\"Count\") +\n        ggtitle(\"Top 10 Job Categories in Tweets\")\n    }\n  )\n  \n  output$distPlot <- renderPlot({\n    ggplot()\n  })\n  \n  output$distPlot <- renderPlot({\n    \n    # create data frame\n    rt <- data_mut() %>%\n      mutate(created_at = as.Date(created_at,format = \"%d/%m/%Y\")) %>%\n      group_by(created_at) %>%\n      summarise(ntweets=n()) \n  \n    # draw the histogram with the specified number of bins\n    ggplot(rt, aes(x=created_at, y=ntweets)) +\n        geom_point() +\n        geom_line()+\n        ggtitle(\"Time series of Tweets\") +\n        xlab(\"Tweet date\")+\n        ylab(\"No of tweets\") \n      \n    \n  })\n\n  output$wordcloud <- renderPlot({\n    wordcloud(wc_data()$word,wc_data()$n, min.freq = 1, max.words= 100)\n  })\n  \n  \n  output$my_table <- renderDataTable({\n    \n    # create data frame\n    temp_100 <- data_mut() \n    \n    temp_100 %>%\n      select(Link = ContentURL, Tweet = text, Time = created_at)\n    \n  }, options = list(pageLength = 4))\n  \n  \n})\n",
    "created" : 1506192298819.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3268327752",
    "id" : "6D73354B",
    "lastKnownWriteTime" : 1500059180,
    "last_content_update" : 1500059180,
    "path" : "~/Desktop/twitter-scrape/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}